{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":73291,"databundleVersionId":8930475,"sourceType":"competition"}],"dockerImageVersionId":30732,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"d8d44692-1329-4c4c-b3dd-923232befca9","_cell_guid":"027da4ef-e0c9-444e-9667-87d7b8d3e4f3","collapsed":false,"jupyter":{"outputs_hidden":false},"editable":false,"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import numpy as np\nimport pandas as pd\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import roc_auc_score\nfrom xgboost import XGBClassifier","metadata":{"_uuid":"ae0fc8ba-bfdf-4b7a-ae6a-2612fd69459e","_cell_guid":"b9d27d93-fa9b-4e60-88fc-2e388dfb4fdc","collapsed":false,"jupyter":{"outputs_hidden":false},"editable":false,"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Function to load datasets\ndef load_datasets():\n    train_dataset = pd.read_csv(\"/kaggle/input/playground-series-s4e7/train.csv\")\n    test_dataset = pd.read_csv(\"/kaggle/input/playground-series-s4e7/test.csv\")\n    train_df = train_dataset.sample(frac=0.7, random_state=42)\n    return train_df, test_dataset\n\n# Function to preprocess the dataset\ndef preprocess_data(df, scaler=None, fit_scaler=False):\n    \n    # Convert categorical variables\n    categorical_features = ['Gender', 'Vehicle_Age', 'Vehicle_Damage']\n    df = pd.get_dummies(df, columns = categorical_features, drop_first=True)\n\n    # Normalize/Standardize numerical features\n    numerical_features = ['Age', 'Annual_Premium', 'Vintage']\n    \n    if fit_scaler:\n        scaler = StandardScaler()\n        df[numerical_features] = scaler.fit_transform(df[numerical_features])\n        return df, scaler\n    else:\n        df[numerical_features] = scaler.transform(df[numerical_features])\n        return df\n\n# Function to prepare data for modeling\ndef prepare_data(train_df):\n    X = train_df.drop('Response', axis=1)\n    y = train_df['Response']\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n    return X_train, X_test, y_train, y_test\n\n# Function to train and evaluate the XGBoost model\ndef train_and_evaluate_model(X_train, y_train, X_val, y_val):\n    model = XGBClassifier(\n        use_label_encoder=False, \n        random_state=42,\n        objective='binary:logistic',\n        eval_metric='auc',\n        learning_rate=0.05,\n        n_estimators=5000,\n        max_depth=9,\n        reg_alpha=0.5,\n        reg_lambda=0.5,\n        tree_method='hist',\n        device='cpu'\n    )\n    model.fit(\n        X_train, y_train,\n        early_stopping_rounds=200,\n        eval_set=[(X_val, y_val)],\n        verbose=True\n    )\n    y_pred_prob = model.predict_proba(X_val)[:, 1]\n    auc = roc_auc_score(y_val, y_pred_prob)\n    print(f'XGBoost Model AUC: {auc:.4f}')\n    return model\n\n# Function to make predictions and save results\ndef make_and_save_predictions(model, test_df):\n    y_pred_prob = model.predict_proba(test_df)[:, 1]\n    submission = pd.DataFrame({\n        'id': test_df['id'],\n        'Response': y_pred_prob\n    })\n    submission.to_csv('submission.csv', index=False)","metadata":{"_uuid":"7bda6bec-3e4d-4776-af37-2ceb700a4a34","_cell_guid":"29d67183-b750-48df-bfb3-4886157e840a","collapsed":false,"jupyter":{"outputs_hidden":false},"editable":false,"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Load datasets\ntrain_dataset, test_dataset = load_datasets()","metadata":{"_uuid":"802e2126-90e1-45ad-a14e-6065107278fc","_cell_guid":"13dd6783-914a-47b4-893c-0d3ed0a1783e","collapsed":false,"jupyter":{"outputs_hidden":false},"editable":false,"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Preprocess training data\ntrain_df, scaler = preprocess_data(train_dataset, fit_scaler=True)","metadata":{"_uuid":"8e095809-155f-4b94-b30c-58311075f5a9","_cell_guid":"30dad6fb-552f-4063-93d4-0a424910633e","collapsed":false,"jupyter":{"outputs_hidden":false},"editable":false,"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"train_df.columns = train_df.columns.str.replace('[', '').str.replace(']', '').str.replace('<', '').str.replace('>', '')","metadata":{"_uuid":"4f04c753-b1ec-4816-8dc6-90b2d6fff46d","_cell_guid":"e9e7d4c4-338e-470e-acdb-62beebd1171a","collapsed":false,"jupyter":{"outputs_hidden":false},"editable":false,"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"feature_names = list(train_df.columns)\nfeature_names","metadata":{"_uuid":"ef51f1fc-8543-4b4b-a829-4a0b5e1c04ed","_cell_guid":"ad5cfd81-108c-4ffa-b13e-58efdeebb86c","collapsed":false,"jupyter":{"outputs_hidden":false},"editable":false,"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Prepare data for modeling\nX_train, X_val, y_train, y_val = prepare_data(train_df)","metadata":{"_uuid":"021605c9-1014-4f7f-b7e6-8f5100486217","_cell_guid":"e48a2988-2715-453e-bc54-206e2e39c7ff","collapsed":false,"jupyter":{"outputs_hidden":false},"editable":false,"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"feature_names = X_train.columns\nlen(feature_names)","metadata":{"_uuid":"882f4e23-6c49-4cb0-b22a-f57268bb0f68","_cell_guid":"ce0a52f1-b40e-49f4-988f-8a7938158dd2","collapsed":false,"jupyter":{"outputs_hidden":false},"editable":false,"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from sklearn.model_selection import GridSearchCV\n\n# Define the hyperparameter grid\nparam_grid = {\n    'learning_rate': [0.01, 0.05, 0.1],\n    'n_estimators': [100, 500, 1000],\n    'max_depth': [3, 5, 7],\n    'reg_alpha': [0.1, 0.5, 1],\n    'reg_lambda': [0.1, 0.5, 1]\n}\n\n# Perform grid search\ngrid_search = GridSearchCV(XGBClassifier(\n                            use_label_encoder=False, \n                            random_state=42,\n                            objective='binary:logistic',\n                            eval_metric='auc',\n                            tree_method='hist',\n                            device='gpu'\n                    ), param_grid, cv=5, scoring='roc_auc')\ngrid_search.fit(X_train, y_train)\n\n# Print the best hyperparameters and the corresponding score\nprint(\"Best hyperparameters:\", grid_search.best_params_)\nprint(\"Best score:\", grid_search.best_score_)","metadata":{"editable":false,"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Train the model with the best hyperparameters\nbest_model = grid_search.best_estimator_\nbest_model.fit(X_train, y_train)\n\n# Make predictions on the test set\ny_pred_prob = best_model.predict_proba(test_df)[:, 1]\nsubmission = pd.DataFrame({'id': test_df['id'], 'Response': y_pred_prob})\nsubmission.to_csv('submission.csv', index=False)","metadata":{"editable":false},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Train and evaluate the model\nmodel = train_and_evaluate_model(X_train, y_train, X_val, y_val)","metadata":{"_uuid":"a5d0abee-65dd-45bd-be50-24345a51a91d","_cell_guid":"3bafdaac-344c-4e51-98e1-4113d00298d9","collapsed":false,"execution":{"iopub.status.busy":"2024-07-11T18:06:42.042872Z","iopub.execute_input":"2024-07-11T18:06:42.043681Z","iopub.status.idle":"2024-07-11T18:08:46.326792Z","shell.execute_reply.started":"2024-07-11T18:06:42.043645Z","shell.execute_reply":"2024-07-11T18:08:46.325824Z"},"jupyter":{"outputs_hidden":false},"editable":false,"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Preprocess test data\ntest_df = preprocess_data(test_dataset, scaler=scaler)","metadata":{"_uuid":"2a02c1ad-52e5-4608-9152-d14544d6c51d","_cell_guid":"c3d3b28f-1994-4661-83cb-b92eab88d634","collapsed":false,"execution":{"iopub.status.busy":"2024-07-11T18:08:54.779714Z","iopub.execute_input":"2024-07-11T18:08:54.780566Z","iopub.status.idle":"2024-07-11T18:08:57.766575Z","shell.execute_reply.started":"2024-07-11T18:08:54.780530Z","shell.execute_reply":"2024-07-11T18:08:57.765752Z"},"jupyter":{"outputs_hidden":false},"editable":false,"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"test_df.columns = test_df.columns.str.replace('[', '').str.replace(']', '').str.replace('<', '').str.replace('>', '')","metadata":{"_uuid":"036fb543-1224-4fdb-8f14-abec9a21cbe1","_cell_guid":"aa1af2c1-5995-4a6e-8048-8e80d732dd9d","collapsed":false,"execution":{"iopub.status.busy":"2024-07-11T18:08:57.767951Z","iopub.execute_input":"2024-07-11T18:08:57.768210Z","iopub.status.idle":"2024-07-11T18:08:57.774138Z","shell.execute_reply.started":"2024-07-11T18:08:57.768186Z","shell.execute_reply":"2024-07-11T18:08:57.773318Z"},"jupyter":{"outputs_hidden":false},"editable":false,"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Make and save predictions\nmake_and_save_predictions(model, test_df)","metadata":{"_uuid":"13b2d40f-12a1-4657-ba9c-f15719c53676","_cell_guid":"f729c49c-6433-47d3-bd2b-d426e2e9dd65","collapsed":false,"execution":{"iopub.status.busy":"2024-07-11T18:09:01.560643Z","iopub.execute_input":"2024-07-11T18:09:01.561345Z","iopub.status.idle":"2024-07-11T18:09:34.013783Z","shell.execute_reply.started":"2024-07-11T18:09:01.561312Z","shell.execute_reply":"2024-07-11T18:09:34.012774Z"},"jupyter":{"outputs_hidden":false},"editable":false,"trusted":true},"execution_count":null,"outputs":[]}]}