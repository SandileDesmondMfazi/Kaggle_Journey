{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":73291,"databundleVersionId":8930475,"sourceType":"competition"}],"dockerImageVersionId":30732,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"e7660b22-cdba-4c73-a5fc-924216278cfb","_cell_guid":"5fa292fe-7937-4c3e-8977-ba9cd4eabb9c","collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2024-07-09T09:43:41.807842Z","iopub.execute_input":"2024-07-09T09:43:41.810096Z","iopub.status.idle":"2024-07-09T09:43:41.825973Z","shell.execute_reply.started":"2024-07-09T09:43:41.810031Z","shell.execute_reply":"2024-07-09T09:43:41.824464Z"},"trusted":true},"execution_count":64,"outputs":[{"name":"stdout","text":"/kaggle/input/playground-series-s4e7/sample_submission.csv\n/kaggle/input/playground-series-s4e7/train.csv\n/kaggle/input/playground-series-s4e7/test.csv\n","output_type":"stream"}]},{"cell_type":"code","source":"import numpy as np\nimport pandas as pd\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import roc_auc_score\nfrom xgboost import XGBClassifier\nimport matplotlib.pyplot as plt\nfrom imblearn.over_sampling import SMOTE\nfrom sklearn.model_selection import StratifiedKFold, GridSearchCV","metadata":{"_uuid":"b698be4e-eee4-4ae2-a5ef-1e09d4cd6f16","_cell_guid":"0299e0f6-1402-4515-8df6-9af1d712c887","collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2024-07-09T09:46:25.291536Z","iopub.execute_input":"2024-07-09T09:46:25.292058Z","iopub.status.idle":"2024-07-09T09:46:25.299447Z","shell.execute_reply.started":"2024-07-09T09:46:25.292018Z","shell.execute_reply":"2024-07-09T09:46:25.297962Z"},"trusted":true},"execution_count":73,"outputs":[]},{"cell_type":"code","source":"# Function to load datasets\ndef load_datasets():\n    train_dataset = pd.read_csv(\"/kaggle/input/playground-series-s4e7/train.csv\")\n    test_dataset = pd.read_csv(\"/kaggle/input/playground-series-s4e7/test.csv\")\n    train_df = train_dataset.sample(frac=0.45, random_state=42)\n    return train_df, test_dataset\n\n# Function to preprocess the dataset\ndef preprocess_data(df, scaler=None, fit_scaler=False):\n    \n    # Convert categorical variables\n    categorical_features = ['Gender', 'Vehicle_Age', 'Vehicle_Damage']\n    df = pd.get_dummies(df, columns=categorical_features, drop_first=True)\n\n    # Normalize/Standardize numerical features\n    numerical_features = ['Age', 'Annual_Premium', 'Vintage']\n    \n    if fit_scaler:\n        scaler = StandardScaler()\n        df[numerical_features] = scaler.fit_transform(df[numerical_features])\n        return df, scaler\n    else:\n        df[numerical_features] = scaler.transform(df[numerical_features])\n        return df\n\n# Function to prepare data for modeling\ndef prepare_data(train_df):\n    X = train_df.drop('Response', axis=1)\n    y = train_df['Response']\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n    return X_train, X_test, y_train, y_test\n\n# Function to train and evaluate the XGBoost model\ndef train_and_evaluate_model(X_train, y_train, X_val, y_val):\n    model = XGBClassifier(use_label_encoder=False, eval_metric='logloss', random_state=42)\n    model.fit(\n        X_train, y_train,\n        early_stopping_rounds=10,\n        eval_set=[(X_val, y_val)],\n        verbose=True\n    )\n    y_pred_prob = model.predict_proba(X_val)[:, 1]\n    auc = roc_auc_score(y_val, y_pred_prob)\n    print(f'XGBoost Model AUC: {auc:.4f}')\n    return model\n\n# Function to make predictions and save results\ndef make_and_save_predictions(model, test_df):\n    y_pred_prob = model.predict_proba(test_df)[:, 1]\n    submission = pd.DataFrame({\n        'id': test_df['id'],\n        'Response': y_pred_prob\n    })\n    submission.to_csv('submission.csv', index=False)","metadata":{"_uuid":"ad8217a8-ef6d-4a26-88e0-9b280ec80949","_cell_guid":"bf26a632-e816-4eea-9466-9b68caf46f3c","collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2024-07-09T09:43:41.985896Z","iopub.execute_input":"2024-07-09T09:43:41.986316Z","iopub.status.idle":"2024-07-09T09:43:42.002549Z","shell.execute_reply.started":"2024-07-09T09:43:41.986286Z","shell.execute_reply":"2024-07-09T09:43:42.000942Z"},"trusted":true},"execution_count":66,"outputs":[]},{"cell_type":"code","source":"# Function to perform Stratified K-Fold Cross-Validation with SMOTE and Hyperparameter Tuning\ndef stratified_kfold_cv_with_smote(X, y, n_splits=5):\n    skf = StratifiedKFold(n_splits=n_splits, shuffle=True, random_state=42)\n    auc_scores = []\n\n    # Define the parameter grid\n    param_grid = {\n        'n_estimators': [100, 200],\n        'learning_rate': [0.01, 0.1, 0.2],\n        'max_depth': [3, 4, 5],\n        'subsample': [0.8, 1.0],\n        'colsample_bytree': [0.8, 1.0]\n    }\n\n    for train_index, val_index in skf.split(X, y):\n        X_train, X_val = X.iloc[train_index], X.iloc[val_index]\n        y_train, y_val = y.iloc[train_index], y.iloc[val_index]\n\n        # Apply SMOTE to the training data\n        smote = SMOTE(random_state=42)\n        X_train_res, y_train_res = smote.fit_resample(X_train, y_train)\n\n        # Initialize the model\n        model = XGBClassifier(use_label_encoder=False, eval_metric='logloss', random_state=42)\n\n        # Perform GridSearchCV\n        grid_search = GridSearchCV(model, param_grid, scoring='roc_auc', cv=3, n_jobs=-1, verbose=1)\n        grid_search.fit(X_train_res, y_train_res, \n                        early_stopping_rounds=10, \n                        eval_set=[(X_val, y_val)], \n                        verbose=True)\n\n        # Best model from GridSearch\n        best_model = grid_search.best_estimator_\n\n        # Evaluate the model\n        y_pred_prob = best_model.predict_proba(X_val)[:, 1]\n        auc = roc_auc_score(y_val, y_pred_prob)\n        auc_scores.append(auc)\n\n    avg_auc = np.mean(auc_scores)\n    print(f'Average AUC across {n_splits} folds: {avg_auc:.4f}')\n    return best_model","metadata":{"execution":{"iopub.status.busy":"2024-07-09T09:51:28.011236Z","iopub.execute_input":"2024-07-09T09:51:28.011757Z","iopub.status.idle":"2024-07-09T09:51:28.027680Z","shell.execute_reply.started":"2024-07-09T09:51:28.011717Z","shell.execute_reply":"2024-07-09T09:51:28.026244Z"},"trusted":true},"execution_count":75,"outputs":[]},{"cell_type":"code","source":"# Load datasets\ntrain_dataset, test_dataset = load_datasets()","metadata":{"_uuid":"b996b02c-f981-4e98-883a-2717d2d16e17","_cell_guid":"9683d12a-e4b7-43fb-a21b-5dff3d35b3e9","collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2024-07-09T09:43:42.059684Z","iopub.execute_input":"2024-07-09T09:43:42.060606Z","iopub.status.idle":"2024-07-09T09:44:19.831359Z","shell.execute_reply.started":"2024-07-09T09:43:42.060565Z","shell.execute_reply":"2024-07-09T09:44:19.830094Z"},"trusted":true},"execution_count":68,"outputs":[]},{"cell_type":"code","source":"# Checking if the Target Variable is imbalance\n# Check the distribution of the target variable\ntarget_distribution = train_dataset['Response'].value_counts(normalize=True)\nprint(target_distribution)\n\n# Visualize the distribution\nplt.figure(figsize=(8, 6))\ntarget_distribution.plot(kind='bar')\nplt.title('Distribution of Target Variable')\nplt.xlabel('Class')\nplt.ylabel('Proportion')\nplt.show()","metadata":{"_uuid":"5c8cbefc-3956-4d65-b5ce-534381e22829","_cell_guid":"b2000bda-1862-4ab6-9016-6d5fc47af4c8","collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2024-07-09T09:44:19.833874Z","iopub.execute_input":"2024-07-09T09:44:19.834283Z","iopub.status.idle":"2024-07-09T09:44:24.206315Z","shell.execute_reply.started":"2024-07-09T09:44:19.834248Z","shell.execute_reply":"2024-07-09T09:44:24.204994Z"},"trusted":true},"execution_count":69,"outputs":[{"name":"stdout","text":"Response\n0    0.877098\n1    0.122902\nName: proportion, dtype: float64\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 800x600 with 1 Axes>","image/png":"iVBORw0KGgoAAAANSUhEUgAAArMAAAIeCAYAAACoZYcrAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuNSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/xnp5ZAAAACXBIWXMAAA9hAAAPYQGoP6dpAAA0lklEQVR4nO3deVyU9f7//+eIMKAImCiI8hW33JcOppGmppzc0uPR0sxcyKVMK8U6aalo5dKGS7l88pOalkfMTD1qWuKSFefmltank6YZYgu4BRgqKFy/P/o5p5FFGEfGtz7utxu3W1xzXTOvGcgeXb7nGptlWZYAAAAAA5Xx9AAAAACAq4hZAAAAGIuYBQAAgLGIWQAAABiLmAUAAICxiFkAAAAYi5gFAACAsYhZAAAAGIuYBQAAgLGIWQD5TJ48WTabrVQeq3379mrfvr3j++3bt8tms2nVqlWl8viDBw9WREREqTyWq37//XcNHTpUoaGhstlsGj16tKdHumXYbDZNnjy5xMctWbJENptNe/bsueq+V/47AKBkiFngJnf5P6qXv3x9fRUWFqZOnTppzpw5Onv2rFse55dfftHkyZO1f/9+t9yfO93IsxXHtGnTtGTJEo0YMULLli3TgAED8u1z+X9ArvZ1I0bTtGnTtGbNmqvuFx8fL5vNpi1bthS6z8KFC2Wz2bRu3To3TgjgRlbW0wMAKB0vvviiatasqYsXLyo1NVXbt2/X6NGjFR8fr3Xr1qlp06aOfSdMmKBx48aV6P5/+eUXTZkyRREREWrevHmxj/vkk09K9DiuKGq2hQsXKi8v77rPcC22bt2qu+66S3FxcYXu06tXL9WpU8fx/e+//64RI0bo73//u3r16uXYHhIScl1ndcW0adP0wAMPqGfPnkXu99BDD+nZZ5/V8uXLFR0dXeA+y5cvV6VKldSlSxe3zHb+/HmVLct/KoEbGf+GAreILl26qEWLFo7vx48fr61bt+r+++9Xjx499N1338nPz0+SVLZs2ev+H/Bz586pXLly8vHxua6PczXe3t4effziOHHihBo2bFjkPk2bNnX6H5JTp05pxIgRatq0qR555JFrniErK0vly5e/5vu5FmFhYbr33nu1evVqzZ8/X3a73en2n3/+WZ999pmGDx9+TT/XvLw85eTkyNfXV76+vtc6NoDrjGUGwC2sQ4cOmjhxoo4dO6b33nvPsb2gNbOffvqp2rRpo6CgIPn7+6tevXp6/vnnJf2xzvXOO++UJMXExDj+SnvJkiWS/lgT2LhxY+3du1dt27ZVuXLlHMcWtl4wNzdXzz//vEJDQ1W+fHn16NFDx48fd9onIiJCgwcPznfsn+/zarMVtGY2KytLY8eOVXh4uOx2u+rVq6fXX39dlmU57Wez2TRq1CitWbNGjRs3lt1uV6NGjbRp06aCX/ArnDhxQkOGDFFISIh8fX3VrFkzvfvuu47bL68f/vHHH7VhwwbH7MnJycW6/ysdO3ZMTzzxhOrVqyc/Pz9VqlRJDz74YL77u7w0ZceOHXriiSdUpUoVVa9e3XH73LlzVatWLfn5+ally5bauXNngT/H7OxsxcXFqU6dOrLb7QoPD9c//vEPZWdnO/ax2WzKysrSu+++63h+Bf1ML3vkkUeUkZGhDRs25LttxYoVysvLU//+/SVJr7/+uu6++25VqlRJfn5+ioyMLHAt9uWf4/vvv69GjRrJbrc7foZXrpkt7mt42blz5/TYY4+pUqVKCggI0MCBA/Xbb78V+vxK8toB+ANnZoFb3IABA/T888/rk08+0bBhwwrc59tvv9X999+vpk2b6sUXX5TdbteRI0f0xRdfSJIaNGigF198UZMmTdLw4cN1zz33SJLuvvtux32cPn1aXbp00UMPPaRHHnnkqn/dPXXqVNlsNj333HM6ceKEZs2apejoaO3fv99xBrk4ijPbn1mWpR49emjbtm0aMmSImjdvrs2bN+vZZ5/Vzz//rJkzZzrt//nnn2v16tV64oknVKFCBc2ZM0e9e/dWSkqKKlWqVOhc58+fV/v27XXkyBGNGjVKNWvW1AcffKDBgwcrPT1dTz/9tBo0aKBly5ZpzJgxql69usaOHStJqly5crGf/5/t3r1bX375pR566CFVr15dycnJmj9/vtq3b6///Oc/KleunNP+TzzxhCpXrqxJkyYpKytLkjR//nyNGjVK99xzj8aMGaPk5GT17NlTFStWdArevLw89ejRQ59//rmGDx+uBg0a6JtvvtHMmTP1/fffO9bILlu2TEOHDlXLli01fPhwSVLt2rULfQ69evXSiBEjtHz5cqflE9IfSwxq1Kih1q1bS5Jmz56tHj16qH///srJydGKFSv04IMPav369erWrZvTsVu3btXKlSs1atQoBQcHF/qmwJK+hqNGjVJQUJAmT56sQ4cOaf78+Tp27Jjjf1QKUtzXDsD/zwJwU1u8eLElydq9e3eh+wQGBlp33HGH4/u4uDjrz388zJw505JknTx5stD72L17tyXJWrx4cb7b2rVrZ0myFixYUOBt7dq1c3y/bds2S5JVrVo1KzMz07F95cqVliRr9uzZjm01atSwBg0adNX7LGq2QYMGWTVq1HB8v2bNGkuS9fLLLzvt98ADD1g2m806cuSIY5sky8fHx2nbgQMHLEnWm2++me+x/mzWrFmWJOu9995zbMvJybGioqIsf39/p+deo0YNq1u3bkXe35VOnjxpSbLi4uIc286dO5dvv6SkJEuStXTpUse2y78zbdq0sS5duuTYnp2dbVWqVMm68847rYsXLzq2L1myxJLk9JovW7bMKlOmjLVz506nx1uwYIElyfriiy8c28qXL1/gz7EwDz74oOXr62tlZGQ4th08eNCSZI0fP77Q55uTk2M1btzY6tChg9N2SVaZMmWsb7/9Nt9jXetrGBkZaeXk5Di2v/rqq5Yka+3atY5tV/6+luS1A2BZLDMAIH9//yKvahAUFCRJWrt2rctvlrLb7YqJiSn2/gMHDlSFChUc3z/wwAOqWrWqNm7c6NLjF9fGjRvl5eWlp556ymn72LFjZVmWPv74Y6ft0dHRTmcSmzZtqoCAAB09evSqjxMaGqp+/fo5tnl7e+upp57S77//rh07drjh2Tj78xntixcv6vTp06pTp46CgoK0b9++fPsPGzZMXl5eju/37Nmj06dPa9iwYU5rqvv376+KFSs6HfvBBx+oQYMGql+/vk6dOuX46tChgyRp27ZtLj+PRx55RBcuXNDq1asd25YvX+6YpaDn+9tvvykjI0P33HNPgc+1Xbt2V12XfOV9Fuc1vHL97ogRI1S2bNkif4+v52sH3IyIWQD6/fffncLxSn379lXr1q01dOhQhYSE6KGHHtLKlStLFLbVqlUr0Zu96tat6/S9zWZTnTp1XF4vWlzHjh1TWFhYvtejQYMGjtv/7P/9v/+X7z4qVqx41XWRx44dU926dVWmjPMfw4U9jjucP39ekyZNcqwFDg4OVuXKlZWenq6MjIx8+9esWTPfzJKcrpog/fGGwSv/Wv7w4cP69ttvVblyZaev22+/XdIf64Vd1aVLF912222O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"},"metadata":{}}]},{"cell_type":"code","source":"# Preprocess training data\ntrain_df, scaler = preprocess_data(train_dataset, fit_scaler=True)","metadata":{"_uuid":"302d5e39-95d8-4bf7-91b7-ae768a312e28","_cell_guid":"d8cdd22d-fb4f-4fec-bb04-0709f733e1e4","collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2024-07-09T09:44:24.207891Z","iopub.execute_input":"2024-07-09T09:44:24.208353Z","iopub.status.idle":"2024-07-09T09:44:26.872033Z","shell.execute_reply.started":"2024-07-09T09:44:24.208320Z","shell.execute_reply":"2024-07-09T09:44:26.870306Z"},"trusted":true},"execution_count":70,"outputs":[]},{"cell_type":"code","source":"train_df.columns = train_df.columns.str.replace('[', '').str.replace(']', '').str.replace('<', '').str.replace('>', '')","metadata":{"_uuid":"1caf24ee-0d7d-4d65-bac2-75de2e3ec4e9","_cell_guid":"93f4ce9a-c340-421e-90b3-2c7e7e3a6b57","collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2024-07-09T09:44:26.873682Z","iopub.execute_input":"2024-07-09T09:44:26.874071Z","iopub.status.idle":"2024-07-09T09:44:26.883792Z","shell.execute_reply.started":"2024-07-09T09:44:26.874039Z","shell.execute_reply":"2024-07-09T09:44:26.882462Z"},"trusted":true},"execution_count":71,"outputs":[]},{"cell_type":"code","source":"# Prepare data for modeling\nX = train_df.drop('Response', axis=1)\ny = train_df['Response']\n\n# Perform Stratified K-Fold Cross-Validation with SMOTE and Hyperparameter Tuning\nbest_model = stratified_kfold_cv_with_smote(X, y, n_splits=5)","metadata":{"execution":{"iopub.status.busy":"2024-07-09T09:51:39.340869Z","iopub.execute_input":"2024-07-09T09:51:39.341479Z","iopub.status.idle":"2024-07-09T09:52:15.805426Z","shell.execute_reply.started":"2024-07-09T09:51:39.341431Z","shell.execute_reply":"2024-07-09T09:52:15.803401Z"},"trusted":true},"execution_count":76,"outputs":[{"name":"stdout","text":"Fitting 3 folds for each of 72 candidates, totalling 216 fits\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/xgboost/sklearn.py:889: UserWarning: `early_stopping_rounds` in `fit` method is deprecated for better compatibility with scikit-learn, use `early_stopping_rounds` in constructor or`set_params` instead.\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/xgboost/sklearn.py:889: UserWarning: `early_stopping_rounds` in `fit` method is deprecated for better compatibility with scikit-learn, use `early_stopping_rounds` in constructor or`set_params` instead.\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/xgboost/sklearn.py:889: UserWarning: `early_stopping_rounds` in `fit` method is deprecated for better compatibility with scikit-learn, use `early_stopping_rounds` in constructor or`set_params` instead.\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/xgboost/sklearn.py:889: UserWarning: `early_stopping_rounds` in `fit` method is deprecated for better compatibility with scikit-learn, use `early_stopping_rounds` in constructor or`set_params` instead.\n  warnings.warn(\n","output_type":"stream"},{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","Cell \u001b[0;32mIn[76], line 6\u001b[0m\n\u001b[1;32m      3\u001b[0m y \u001b[38;5;241m=\u001b[39m train_df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mResponse\u001b[39m\u001b[38;5;124m'\u001b[39m]\n\u001b[1;32m      5\u001b[0m \u001b[38;5;66;03m# Perform Stratified K-Fold Cross-Validation with SMOTE and Hyperparameter Tuning\u001b[39;00m\n\u001b[0;32m----> 6\u001b[0m best_model \u001b[38;5;241m=\u001b[39m \u001b[43mstratified_kfold_cv_with_smote\u001b[49m\u001b[43m(\u001b[49m\u001b[43mX\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43my\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mn_splits\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;241;43m5\u001b[39;49m\u001b[43m)\u001b[49m\n","Cell \u001b[0;32mIn[75], line 28\u001b[0m, in \u001b[0;36mstratified_kfold_cv_with_smote\u001b[0;34m(X, y, n_splits)\u001b[0m\n\u001b[1;32m     26\u001b[0m \u001b[38;5;66;03m# Perform GridSearchCV\u001b[39;00m\n\u001b[1;32m     27\u001b[0m grid_search \u001b[38;5;241m=\u001b[39m GridSearchCV(model, param_grid, scoring\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mroc_auc\u001b[39m\u001b[38;5;124m'\u001b[39m, cv\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m3\u001b[39m, n_jobs\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m-\u001b[39m\u001b[38;5;241m1\u001b[39m, verbose\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m1\u001b[39m)\n\u001b[0;32m---> 28\u001b[0m \u001b[43mgrid_search\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mfit\u001b[49m\u001b[43m(\u001b[49m\u001b[43mX_train_res\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43my_train_res\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\n\u001b[1;32m     29\u001b[0m \u001b[43m                \u001b[49m\u001b[43mearly_stopping_rounds\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;241;43m10\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\n\u001b[1;32m     30\u001b[0m \u001b[43m                \u001b[49m\u001b[43meval_set\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43m[\u001b[49m\u001b[43m(\u001b[49m\u001b[43mX_val\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43my_val\u001b[49m\u001b[43m)\u001b[49m\u001b[43m]\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\n\u001b[1;32m     31\u001b[0m \u001b[43m                \u001b[49m\u001b[43mverbose\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43;01mTrue\u001b[39;49;00m\u001b[43m)\u001b[49m\n\u001b[1;32m     33\u001b[0m \u001b[38;5;66;03m# Best model from GridSearch\u001b[39;00m\n\u001b[1;32m     34\u001b[0m best_model \u001b[38;5;241m=\u001b[39m grid_search\u001b[38;5;241m.\u001b[39mbest_estimator_\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_search.py:874\u001b[0m, in \u001b[0;36mBaseSearchCV.fit\u001b[0;34m(self, X, y, groups, **fit_params)\u001b[0m\n\u001b[1;32m    868\u001b[0m     results \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_format_results(\n\u001b[1;32m    869\u001b[0m         all_candidate_params, n_splits, all_out, all_more_results\n\u001b[1;32m    870\u001b[0m     )\n\u001b[1;32m    872\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m results\n\u001b[0;32m--> 874\u001b[0m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_run_search\u001b[49m\u001b[43m(\u001b[49m\u001b[43mevaluate_candidates\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    876\u001b[0m \u001b[38;5;66;03m# multimetric is determined here because in the case of a callable\u001b[39;00m\n\u001b[1;32m    877\u001b[0m \u001b[38;5;66;03m# self.scoring the return type is only known after calling\u001b[39;00m\n\u001b[1;32m    878\u001b[0m first_test_score \u001b[38;5;241m=\u001b[39m all_out[\u001b[38;5;241m0\u001b[39m][\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mtest_scores\u001b[39m\u001b[38;5;124m\"\u001b[39m]\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_search.py:1388\u001b[0m, in \u001b[0;36mGridSearchCV._run_search\u001b[0;34m(self, evaluate_candidates)\u001b[0m\n\u001b[1;32m   1386\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21m_run_search\u001b[39m(\u001b[38;5;28mself\u001b[39m, evaluate_candidates):\n\u001b[1;32m   1387\u001b[0m \u001b[38;5;250m    \u001b[39m\u001b[38;5;124;03m\"\"\"Search all candidates in param_grid\"\"\"\u001b[39;00m\n\u001b[0;32m-> 1388\u001b[0m     \u001b[43mevaluate_candidates\u001b[49m\u001b[43m(\u001b[49m\u001b[43mParameterGrid\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mparam_grid\u001b[49m\u001b[43m)\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_search.py:821\u001b[0m, in \u001b[0;36mBaseSearchCV.fit.<locals>.evaluate_candidates\u001b[0;34m(candidate_params, cv, more_results)\u001b[0m\n\u001b[1;32m    813\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mverbose \u001b[38;5;241m>\u001b[39m \u001b[38;5;241m0\u001b[39m:\n\u001b[1;32m    814\u001b[0m     \u001b[38;5;28mprint\u001b[39m(\n\u001b[1;32m    815\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mFitting \u001b[39m\u001b[38;5;132;01m{0}\u001b[39;00m\u001b[38;5;124m folds for each of \u001b[39m\u001b[38;5;132;01m{1}\u001b[39;00m\u001b[38;5;124m candidates,\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    816\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m totalling \u001b[39m\u001b[38;5;132;01m{2}\u001b[39;00m\u001b[38;5;124m fits\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;241m.\u001b[39mformat(\n\u001b[1;32m    817\u001b[0m             n_splits, n_candidates, n_candidates \u001b[38;5;241m*\u001b[39m n_splits\n\u001b[1;32m    818\u001b[0m         )\n\u001b[1;32m    819\u001b[0m     )\n\u001b[0;32m--> 821\u001b[0m out \u001b[38;5;241m=\u001b[39m \u001b[43mparallel\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m    822\u001b[0m \u001b[43m    \u001b[49m\u001b[43mdelayed\u001b[49m\u001b[43m(\u001b[49m\u001b[43m_fit_and_score\u001b[49m\u001b[43m)\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m    823\u001b[0m \u001b[43m        \u001b[49m\u001b[43mclone\u001b[49m\u001b[43m(\u001b[49m\u001b[43mbase_estimator\u001b[49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    824\u001b[0m \u001b[43m        \u001b[49m\u001b[43mX\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    825\u001b[0m \u001b[43m        \u001b[49m\u001b[43my\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    826\u001b[0m \u001b[43m        \u001b[49m\u001b[43mtrain\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mtrain\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    827\u001b[0m \u001b[43m        \u001b[49m\u001b[43mtest\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mtest\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    828\u001b[0m \u001b[43m        \u001b[49m\u001b[43mparameters\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mparameters\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    829\u001b[0m \u001b[43m        \u001b[49m\u001b[43msplit_progress\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43msplit_idx\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mn_splits\u001b[49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    830\u001b[0m \u001b[43m        \u001b[49m\u001b[43mcandidate_progress\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43mcand_idx\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mn_candidates\u001b[49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    831\u001b[0m \u001b[43m        \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mfit_and_score_kwargs\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    832\u001b[0m \u001b[43m    \u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    833\u001b[0m \u001b[43m    \u001b[49m\u001b[38;5;28;43;01mfor\u001b[39;49;00m\u001b[43m \u001b[49m\u001b[43m(\u001b[49m\u001b[43mcand_idx\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mparameters\u001b[49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43m(\u001b[49m\u001b[43msplit_idx\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43m(\u001b[49m\u001b[43mtrain\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mtest\u001b[49m\u001b[43m)\u001b[49m\u001b[43m)\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;129;43;01min\u001b[39;49;00m\u001b[43m \u001b[49m\u001b[43mproduct\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m    834\u001b[0m \u001b[43m        \u001b[49m\u001b[38;5;28;43menumerate\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43mcandidate_params\u001b[49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43menumerate\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43mcv\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43msplit\u001b[49m\u001b[43m(\u001b[49m\u001b[43mX\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43my\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mgroups\u001b[49m\u001b[43m)\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    835\u001b[0m \u001b[43m    \u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    836\u001b[0m \u001b[43m\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    838\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mlen\u001b[39m(out) \u001b[38;5;241m<\u001b[39m \u001b[38;5;241m1\u001b[39m:\n\u001b[1;32m    839\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\n\u001b[1;32m    840\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mNo fits were performed. \u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    841\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mWas the CV iterator empty? \u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    842\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mWere there no candidates?\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    843\u001b[0m     )\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/sklearn/utils/parallel.py:63\u001b[0m, in \u001b[0;36mParallel.__call__\u001b[0;34m(self, iterable)\u001b[0m\n\u001b[1;32m     58\u001b[0m config \u001b[38;5;241m=\u001b[39m get_config()\n\u001b[1;32m     59\u001b[0m iterable_with_config \u001b[38;5;241m=\u001b[39m (\n\u001b[1;32m     60\u001b[0m     (_with_config(delayed_func, config), args, kwargs)\n\u001b[1;32m     61\u001b[0m     \u001b[38;5;28;01mfor\u001b[39;00m delayed_func, args, kwargs \u001b[38;5;129;01min\u001b[39;00m iterable\n\u001b[1;32m     62\u001b[0m )\n\u001b[0;32m---> 63\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43msuper\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[38;5;21;43m__call__\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43miterable_with_config\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/joblib/parallel.py:2007\u001b[0m, in \u001b[0;36mParallel.__call__\u001b[0;34m(self, iterable)\u001b[0m\n\u001b[1;32m   2001\u001b[0m \u001b[38;5;66;03m# The first item from the output is blank, but it makes the interpreter\u001b[39;00m\n\u001b[1;32m   2002\u001b[0m \u001b[38;5;66;03m# progress until it enters the Try/Except block of the generator and\u001b[39;00m\n\u001b[1;32m   2003\u001b[0m \u001b[38;5;66;03m# reaches the first `yield` statement. This starts the asynchronous\u001b[39;00m\n\u001b[1;32m   2004\u001b[0m \u001b[38;5;66;03m# dispatch of the tasks to the workers.\u001b[39;00m\n\u001b[1;32m   2005\u001b[0m \u001b[38;5;28mnext\u001b[39m(output)\n\u001b[0;32m-> 2007\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m output \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mreturn_generator \u001b[38;5;28;01melse\u001b[39;00m \u001b[38;5;28;43mlist\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43moutput\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/joblib/parallel.py:1650\u001b[0m, in \u001b[0;36mParallel._get_outputs\u001b[0;34m(self, iterator, pre_dispatch)\u001b[0m\n\u001b[1;32m   1647\u001b[0m     \u001b[38;5;28;01myield\u001b[39;00m\n\u001b[1;32m   1649\u001b[0m     \u001b[38;5;28;01mwith\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_backend\u001b[38;5;241m.\u001b[39mretrieval_context():\n\u001b[0;32m-> 1650\u001b[0m         \u001b[38;5;28;01myield from\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_retrieve()\n\u001b[1;32m   1652\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mGeneratorExit\u001b[39;00m:\n\u001b[1;32m   1653\u001b[0m     \u001b[38;5;66;03m# The generator has been garbage collected before being fully\u001b[39;00m\n\u001b[1;32m   1654\u001b[0m     \u001b[38;5;66;03m# consumed. This aborts the remaining tasks if possible and warn\u001b[39;00m\n\u001b[1;32m   1655\u001b[0m     \u001b[38;5;66;03m# the user if necessary.\u001b[39;00m\n\u001b[1;32m   1656\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_exception \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mTrue\u001b[39;00m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/joblib/parallel.py:1762\u001b[0m, in \u001b[0;36mParallel._retrieve\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m   1757\u001b[0m \u001b[38;5;66;03m# If the next job is not ready for retrieval yet, we just wait for\u001b[39;00m\n\u001b[1;32m   1758\u001b[0m \u001b[38;5;66;03m# async callbacks to progress.\u001b[39;00m\n\u001b[1;32m   1759\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m ((\u001b[38;5;28mlen\u001b[39m(\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_jobs) \u001b[38;5;241m==\u001b[39m \u001b[38;5;241m0\u001b[39m) \u001b[38;5;129;01mor\u001b[39;00m\n\u001b[1;32m   1760\u001b[0m     (\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_jobs[\u001b[38;5;241m0\u001b[39m]\u001b[38;5;241m.\u001b[39mget_status(\n\u001b[1;32m   1761\u001b[0m         timeout\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mtimeout) \u001b[38;5;241m==\u001b[39m TASK_PENDING)):\n\u001b[0;32m-> 1762\u001b[0m     \u001b[43mtime\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43msleep\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m0.01\u001b[39;49m\u001b[43m)\u001b[49m\n\u001b[1;32m   1763\u001b[0m     \u001b[38;5;28;01mcontinue\u001b[39;00m\n\u001b[1;32m   1765\u001b[0m \u001b[38;5;66;03m# We need to be careful: the job list can be filling up as\u001b[39;00m\n\u001b[1;32m   1766\u001b[0m \u001b[38;5;66;03m# we empty it and Python list are not thread-safe by\u001b[39;00m\n\u001b[1;32m   1767\u001b[0m \u001b[38;5;66;03m# default hence the use of the lock\u001b[39;00m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "],"ename":"KeyboardInterrupt","evalue":"","output_type":"error"}]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"feature_names = list(train_df.columns)\nfeature_names","metadata":{"_uuid":"abe2312b-9ba6-41ab-a867-d97051b614c8","_cell_guid":"1e0598f6-bb66-4910-b399-95807c52e91a","collapsed":false,"execution":{"iopub.status.busy":"2024-07-09T09:20:25.599177Z","iopub.execute_input":"2024-07-09T09:20:25.600274Z","iopub.status.idle":"2024-07-09T09:20:25.617618Z","shell.execute_reply.started":"2024-07-09T09:20:25.600222Z","shell.execute_reply":"2024-07-09T09:20:25.615822Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Prepare data for modeling\nX_train, X_val, y_train, y_val = prepare_data(train_df)","metadata":{"_uuid":"dd73310e-e738-42cf-84dc-f9b98a25dd4e","_cell_guid":"4a85950e-997c-4e97-9474-1727fc38e7c7","collapsed":false,"execution":{"iopub.status.busy":"2024-07-09T09:20:25.619535Z","iopub.execute_input":"2024-07-09T09:20:25.620464Z","iopub.status.idle":"2024-07-09T09:20:27.533079Z","shell.execute_reply.started":"2024-07-09T09:20:25.620419Z","shell.execute_reply":"2024-07-09T09:20:27.531612Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"feature_names = list(X_train.columns)\nfeature_names","metadata":{"_uuid":"1f8de800-bc49-464e-948f-e3e2ecdec0f4","_cell_guid":"1891ee73-2294-4d1c-b132-a4808c4771e1","collapsed":false,"execution":{"iopub.status.busy":"2024-07-09T09:20:27.536487Z","iopub.execute_input":"2024-07-09T09:20:27.536924Z","iopub.status.idle":"2024-07-09T09:20:27.546748Z","shell.execute_reply.started":"2024-07-09T09:20:27.536876Z","shell.execute_reply":"2024-07-09T09:20:27.545183Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Apply SMOTE to the training data\nsmote = SMOTE(random_state=42)\nX_train_res, y_train_res = smote.fit_resample(X_train, y_train)","metadata":{"_uuid":"d57353cf-3874-48c4-a873-004a19dfcd25","_cell_guid":"3cf87bf4-1237-4960-a49e-dd893442569b","collapsed":false,"execution":{"iopub.status.busy":"2024-07-09T09:20:27.548704Z","iopub.execute_input":"2024-07-09T09:20:27.549153Z","iopub.status.idle":"2024-07-09T09:20:38.993425Z","shell.execute_reply.started":"2024-07-09T09:20:27.549105Z","shell.execute_reply":"2024-07-09T09:20:38.992168Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Train and evaluate the model\nmodel = train_and_evaluate_model(X_train_res, y_train_res, X_val, y_val)","metadata":{"_uuid":"3e14be86-d585-467c-b14b-876e65fa7cbe","_cell_guid":"52aff3ec-8889-4843-8481-e085f836d6d3","collapsed":false,"execution":{"iopub.status.busy":"2024-07-09T09:20:38.995006Z","iopub.execute_input":"2024-07-09T09:20:38.995383Z","iopub.status.idle":"2024-07-09T09:22:01.995543Z","shell.execute_reply.started":"2024-07-09T09:20:38.995350Z","shell.execute_reply":"2024-07-09T09:22:01.994227Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Preprocess test data\ntest_df = preprocess_data(test_dataset, scaler=scaler)","metadata":{"_uuid":"4a8aa2d8-88aa-4df1-93e8-5b0a6de3113a","_cell_guid":"114dd871-ed90-4037-9a6e-3429833db5e1","collapsed":false,"execution":{"iopub.status.busy":"2024-07-09T09:22:11.888074Z","iopub.execute_input":"2024-07-09T09:22:11.888560Z","iopub.status.idle":"2024-07-09T09:22:15.569328Z","shell.execute_reply.started":"2024-07-09T09:22:11.888526Z","shell.execute_reply":"2024-07-09T09:22:15.567573Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"test_df.columns = test_df.columns.str.replace('[', '').str.replace(']', '').str.replace('<', '').str.replace('>', '')","metadata":{"_uuid":"3a8924ea-f5f6-4443-a664-f9b8a34212fe","_cell_guid":"835a1f47-9c8e-44e0-9a33-a2ea8bb9c272","collapsed":false,"execution":{"iopub.status.busy":"2024-07-09T09:22:18.453179Z","iopub.execute_input":"2024-07-09T09:22:18.453586Z","iopub.status.idle":"2024-07-09T09:22:18.461175Z","shell.execute_reply.started":"2024-07-09T09:22:18.453553Z","shell.execute_reply":"2024-07-09T09:22:18.459735Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Make and save predictions\nmake_and_save_predictions(model, test_df)","metadata":{"_uuid":"de168417-f859-4f06-9c0e-e8f7a7beec9d","_cell_guid":"6a3059ee-33c0-4c2f-8830-26d11bc0e8f0","collapsed":false,"execution":{"iopub.status.busy":"2024-07-09T09:22:23.331506Z","iopub.execute_input":"2024-07-09T09:22:23.331924Z","iopub.status.idle":"2024-07-09T09:23:05.873149Z","shell.execute_reply.started":"2024-07-09T09:22:23.331879Z","shell.execute_reply":"2024-07-09T09:23:05.871959Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]}]}